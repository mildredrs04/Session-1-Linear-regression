# -*- coding: utf-8 -*-
"""session 1 linear regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P-FK38VeHhLnj663oG10TXgAZ0aRxDgC
"""

#Session 1: framework and misc
#Name: Mildred Ram√≠rez
#ID: A01705162
#Date: 06/03/2023
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

from google.colab import drive

drive.mount("/content/gdrive", force_remount=True)
!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/gdrive/MyDrive/Intelligent Systems"
!ls



#Load dataset
df = pd.read_csv('Life Expectancy Data.csv')
df.columns = ["Country","Year","Status", "Life expectancy", "Adult Mortality", "infant deaths", "Alcohol", "percentage expenditure", "Hepatitis B", "Measles", "BMI", "under-five deaths", "Polio", "Total expenditure", "Diphteria", "HIV/AIDS", "GDP", "Population", "thinnes 1-19 years", "thinnes 5-9 years", "Income composition of resources", "Schooling"]

#Name columns
df_x = df[["Country","Year","Status","Adult Mortality", "infant deaths", "Alcohol", "percentage expenditure", "Hepatitis B", "Measles", "BMI", "under-five deaths", "Polio", "Total expenditure", "Diphteria", "HIV/AIDS", "GDP", "Population", "thinnes 1-19 years", "thinnes 5-9 years", "Income composition of resources", "Schooling"]]
df_y = df[["Life expectancy"]]

#df.drop(df.index[0], inplace=True)
df = df.dropna()
df

#df.describe()
#pd.plotting.scatter_matrix(df)
df.plot('Income composition of resources', 'Life expectancy', kind ='scatter')

#Using only one feature
X = df[["Income composition of resources"]]
y = df[["Life expectancy"]]

#Split dataset into train and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Commented out IPython magic to ensure Python compatibility.
# Create linear regression object
regression = linear_model.LinearRegression()

# Train the model using the training sets
regression.fit(X_train, y_train)

# Make predictions using the testing set
y_pred = regression.predict(X_test)

#To retrieve the intercept:
print(regression.intercept_)

#For retrieving the slope:
print(regression.coef_)

# The mean squared error
pred_train = regression.predict(X_train)
print('Train Mean squared error: %.2f'
#       % mean_squared_error(y_train, pred_train ))
# The coefficient of determination: 1 is perfect prediction
print('Train Coefficient of determination: %.2f'
#       % r2_score(y_train, pred_train))

# The mean squared error
print('Test Mean squared error: %.2f'
#       % mean_squared_error(y_test, y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Test Coefficient of determination: %.2f'
#       % r2_score(y_test, y_pred))

# Plot outputs
plt.scatter(X_test, y_test,  color='blue')
plt.plot(X_test, y_pred, color='red', linewidth=3)
plt.title('Life expectancy using linear regression')  
plt.xlabel('Income composition of resources')  
plt.ylabel('Life expectancy') 

#plt.xticks(())
#plt.yticks(())
plt.show()

#Interface
value = input('Press 1 if you want to make a prediction')

while value == '1':
    income = input("\nEnter the income composition of resources: ")
    ft = np.expand_dims(np.array([income], dtype = 'float64'), axis=0)
    
    # Perform prediction
    prediction = regression.predict(ft)
    print("\nThe Life expectancy is: ", prediction)

    value = input("\nPress 1 to make another prediction, if not press 0: ")